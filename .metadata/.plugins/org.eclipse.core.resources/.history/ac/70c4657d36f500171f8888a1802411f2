#include "gui.h"

#include "stm32f429i_discovery_ts.h"  // touch-screen header
#include "stm32f429i_discovery_lcd.h" // lcd header

#include <stdlib.h>

//Notes: Screen Size: 240x320

// do flash routine here for now

#include "stm32f4xx_hal_flash.h"

void save_data_to_flash(int data_a, int data_b) {
	HAL_FLASH_Unlock();
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
    FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_FLASH_SECTOR_11_A,data_a);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,ADDR_FLASH_SECTOR_11_B,data_b);
	HAL_FLASH_Lock();
}

// initialize the LCD

void LCDInit()
{
	  BSP_LCD_Init();
	  BSP_TS_Init(240,360);

	  BSP_LCD_LayerDefaultInit(1,SDRAM_DEVICE_ADDR);
	  BSP_LCD_SelectLayer(1);

	  BSP_LCD_DisplayOn();
}

// LCD event handler

void window_1_callback (UG_MESSAGE* msg)
{
	int group;

    if (msg->type == MSG_TYPE_OBJECT )
    {
    	if (msg->id == OBJ_TYPE_BUTTON )
    	{

    		if (gui_state <= MINUS_A) {group = 0;}
			if (gui_state > MINUS_A) {group = 1;}

    		switch(msg->sub_id) // handle button presses
    		{

    			case BTN_ID_0:  // stop button pressed
    		    				if (msg->event == OBJ_EVENT_PRESSED) {
    		    					if (group == 0) {gui_state = STOP_A;} else {gui_state = STOP_B;}
    		    					UG_ButtonSetBackColor (&window_1 , BTN_ID_1, C_BLUE ) ;
    		    					UG_ButtonSetBackColor (&window_1 , BTN_ID_2, C_BLUE ) ;
    		    					UG_ButtonSetBackColor (&window_1 , BTN_ID_3, C_BLUE ) ;
    		    					UG_ButtonSetBackColor (&window_1 , BTN_ID_0, C_RED ) ;
    		    					UG_ButtonSetText(&window_1, BTN_ID_0, "PRESS!");

    		    					// save data to flash
    		    					save_data_to_flash(motor_speed_a, motor_speed_b);
    		    				}
    		    				else {
    		    					UG_ButtonSetForeColor(&window_1, BTN_ID_0, C_BLACK );
    		    					UG_ButtonSetText(&window_1, BTN_ID_0, "STOP");
    		    				}
    		    				break;
    			case BTN_ID_1: // start button pressed
    				if (msg->event == OBJ_EVENT_PRESSED) {
    					if (group == 0) {gui_state = START_A;} else {gui_state = START_B;}

    					UG_ButtonSetBackColor (&window_1 , BTN_ID_1, C_GREEN ) ;
    					UG_ButtonSetBackColor (&window_1 , BTN_ID_0, C_BLUE ) ;
    					UG_ButtonSetText(&window_1, BTN_ID_1, "PRESS!");
    				}
    				else {
    					UG_ButtonSetForeColor(&window_1, BTN_ID_1, C_BLACK );
    					UG_ButtonSetText(&window_1, BTN_ID_1, "START");
    				}
    				break;
    			case BTN_ID_2: // fwd button pressed
    				if (msg->event == OBJ_EVENT_PRESSED) {

    					if (gui_state != STOP_A && group == 0 ) {gui_state = FWD_A;}
    					if (gui_state != STOP_B && group == 1 ) {gui_state = FWD_B;}
    					UG_ButtonSetBackColor (&window_1 , BTN_ID_2, C_YELLOW ) ;
    					UG_ButtonSetBackColor (&window_1 , BTN_ID_3, C_BLUE ) ;
    					UG_ButtonSetText(&window_1, BTN_ID_2, "PRESS!");
    				}
    				else {
    					if (gui_state != FWD_A && gui_state != FWD_B) { UG_ButtonSetBackColor (&window_1 ,BTN_ID_2, C_BLUE);}
    					UG_ButtonSetBackColor (&window_1 , BTN_ID_3, C_BLUE ) ;
    					UG_ButtonSetText(&window_1, BTN_ID_2, "FWD");
    				}
    				break;
    			case BTN_ID_3: // rev button pressed
    				if (msg->event == OBJ_EVENT_PRESSED) {

    					if (gui_state != STOP_A && group == 0 ) {gui_state = REV_A;}
    					if (gui_state != STOP_B && group == 1 ) {gui_state = REV_B;}

    					UG_ButtonSetBackColor (&window_1 , BTN_ID_2, C_BLUE ) ;
    					UG_ButtonSetBackColor (&window_1 , BTN_ID_3, C_YELLOW ) ;
    					UG_ButtonSetText(&window_1, BTN_ID_3, "PRESS!");
    				}
    				else {
    				    if (gui_state != REV_A && gui_state != REV_B) { UG_ButtonSetBackColor (&window_1 ,BTN_ID_3, C_BLUE);}

    					UG_ButtonSetBackColor (&window_1 , BTN_ID_2, C_BLUE ) ;
    					UG_ButtonSetText(&window_1, BTN_ID_3, "REV");
    				}
    				break;
    		   case BTN_ID_4: // plus button pressed
    				if ( msg->event == OBJ_EVENT_PRESSED) {
    					if (group == 0) {gui_state = PLUS_A;}
    					if (group == 1) {gui_state = PLUS_B;}
    					UG_ButtonSetBackColor (&window_1 , BTN_ID_4, C_GREEN ) ;
    					UG_ButtonSetText(&window_1, BTN_ID_4, "PRESS!");

    					if (motor_state == 0) {
    						motor_speed_a = motor_speed_a + 100;
    						if (motor_speed_a > MAX_MTR_SPEED) motor_speed_a = MAX_MTR_SPEED;
    					}
    					if (motor_state == 1) {
    						motor_speed_b = motor_speed_b + 100;
    						if (motor_speed_b > MAX_MTR_SPEED) motor_speed_b = MAX_MTR_SPEED;
    					}

    				   if (motor_state == 0) {itoa(motor_speed_a,buffer,10);}
    			       if (motor_state == 1) {itoa(motor_speed_b,buffer,10);}
    			       UG_TextboxSetText ( &window_1 , TXB_ID_1, buffer);

    				}
    				else {
    					UG_ButtonSetBackColor (&window_1 , BTN_ID_4, C_BLUE ) ;
    					UG_ButtonSetText(&window_1, BTN_ID_4, "+");
    				}
    			    break;
    		   case BTN_ID_5: // minus button pressed
    			   if (msg->event == OBJ_EVENT_PRESSED) {
    				   if (group == 0) {gui_state = MINUS_A;}
    				   if (group == 1) {gui_state = MINUS_B;}
                       UG_ButtonSetBackColor (&window_1 , BTN_ID_5, C_GREEN ) ;
    				   UG_ButtonSetText(&window_1, BTN_ID_5, "PRESS!");

    				   if (motor_state == 0) {
    				       	motor_speed_a = motor_speed_a - 100;
    				       	if (motor_speed_a < 0) motor_speed_a = 0;
    				   }
    				   if (motor_state == 1) {
    				        motor_speed_b = motor_speed_b - 100;
    				        if (motor_speed_b < 0) motor_speed_b = 0;
    				   }
    				   if (motor_state == 0) {itoa(motor_speed_a,buffer,10);}
    			       if (motor_state == 1) {itoa(motor_speed_b,buffer,10);}
    			       UG_TextboxSetText ( &window_1 , TXB_ID_1, buffer);


    			   }
    			   else {

    				   UG_ButtonSetBackColor (&window_1 , BTN_ID_5, C_BLUE ) ;
    				   UG_ButtonSetText(&window_1, BTN_ID_5, "-");
    			   }
    			   break;
    		   case BTN_ID_6: // motor button pressed
    			   if (msg->event == OBJ_EVENT_PRESSED) {
    				   motor_flag = 1;
    				   UG_ButtonSetBackColor (&window_1 , BTN_ID_6, C_GREEN ) ;
    				   UG_ButtonSetText(&window_1, BTN_ID_6, "PRESS!");
    				   if (motor_state) {
    		    			motor_state = 0;
    				   }
    				   else {
    		    			motor_state = 1;
    				   }

    				   if (group == 0)
    				   {gui_state = gui_state + STOP_B; group = 1;}
    				   else
    				   {gui_state = gui_state - STOP_B; group = 0;}

    				   if (gui_state < 0) gui_state = 0;
    				   if (gui_state > MINUS_B) gui_state = MINUS_B;

    			   }
    			   else {
    				motor_flag = 0;

    		    	if (motor_state == 0) {
    		    		UG_ButtonSetBackColor (&window_1 , BTN_ID_6, C_YELLOW ) ;
    		    		UG_ButtonSetText(&window_1, BTN_ID_6, "MTR A");
    		    	}
    		    	else {
    		    		UG_ButtonSetBackColor (&window_1 , BTN_ID_6, C_WHITE ) ;
    		    		UG_ButtonSetText(&window_1, BTN_ID_6, "MTR B");
    		    	}
    		        // redo the gui
    		    	 if (motor_state == 0) {itoa(motor_speed_a,buffer,10);}
    		    	 if (motor_state == 1) {itoa(motor_speed_b,buffer,10);}
    				 UG_TextboxSetText ( &window_1 , TXB_ID_1, buffer);

    		        switch (gui_state) {
    		          case STOP_A:
    		        	UG_ButtonSetBackColor (&window_1 , BTN_ID_1, C_BLUE ) ;
    		            UG_ButtonSetBackColor (&window_1 , BTN_ID_2, C_BLUE ) ;
    		            UG_ButtonSetBackColor (&window_1 , BTN_ID_3, C_BLUE ) ;
    		        	UG_ButtonSetBackColor (&window_1 , BTN_ID_0, C_RED ) ;
    		        	break;
    		         case START_A:
    	    			UG_ButtonSetBackColor (&window_1 , BTN_ID_1, C_GREEN ) ;
    	    			UG_ButtonSetBackColor (&window_1 , BTN_ID_2, C_BLUE ) ;
     		            UG_ButtonSetBackColor (&window_1 , BTN_ID_3, C_BLUE ) ;
    	    			UG_ButtonSetBackColor (&window_1 , BTN_ID_0, C_BLUE ) ;
    	    			break;
    		          case FWD_A:
    		        	UG_ButtonSetBackColor (&window_1 , BTN_ID_1, C_GREEN ) ;
    		            UG_ButtonSetBackColor (&window_1 , BTN_ID_0, C_BLUE ) ;
    		        	UG_ButtonSetBackColor (&window_1 , BTN_ID_2, C_YELLOW ) ;
    		            UG_ButtonSetBackColor (&window_1 , BTN_ID_3, C_BLUE ) ;
    		            break;
    		         case REV_A:
                    	UG_ButtonSetBackColor (&window_1 , BTN_ID_1, C_GREEN ) ;
                    	UG_ButtonSetBackColor (&window_1 , BTN_ID_0, C_BLUE ) ;
                    	UG_ButtonSetBackColor (&window_1 , BTN_ID_2, C_BLUE ) ;
                    	UG_ButtonSetBackColor (&window_1 , BTN_ID_3, C_YELLOW ) ;
                        break;
    		         case STOP_B:
    		            UG_ButtonSetBackColor (&window_1 , BTN_ID_1, C_BLUE ) ;
    		            UG_ButtonSetBackColor (&window_1 , BTN_ID_2, C_BLUE ) ;
    		            UG_ButtonSetBackColor (&window_1 , BTN_ID_3, C_BLUE ) ;
    		            UG_ButtonSetBackColor (&window_1 , BTN_ID_0, C_RED ) ;
    		            break;
    		         case START_B:
    		            UG_ButtonSetBackColor (&window_1 , BTN_ID_1, C_GREEN ) ;
    		            UG_ButtonSetBackColor (&window_1 , BTN_ID_2, C_BLUE ) ;
    		            UG_ButtonSetBackColor (&window_1 , BTN_ID_3, C_BLUE ) ;
    		            UG_ButtonSetBackColor (&window_1 , BTN_ID_0, C_BLUE ) ;
    		            break;
    		          case FWD_B:
    		             UG_ButtonSetBackColor (&window_1 , BTN_ID_1, C_GREEN ) ;
    		             UG_ButtonSetBackColor (&window_1 , BTN_ID_0, C_BLUE ) ;
    		             UG_ButtonSetBackColor (&window_1 , BTN_ID_2, C_YELLOW ) ;
    		             UG_ButtonSetBackColor (&window_1 , BTN_ID_3, C_BLUE ) ;
    		            break;
    		          case REV_B:
    		             UG_ButtonSetBackColor (&window_1 , BTN_ID_1, C_GREEN ) ;
    		             UG_ButtonSetBackColor (&window_1 , BTN_ID_0, C_BLUE ) ;
    		             UG_ButtonSetBackColor (&window_1 , BTN_ID_2, C_BLUE ) ;
    		             UG_ButtonSetBackColor (&window_1 , BTN_ID_3, C_YELLOW ) ;
    		           break;
    		        default:
    		        	break;
    		        }
    			   }
    		    break;
    		 default:
    		    break;
    			   }
    		}
    	}
}

void GUIInit()
{
	 // Create a window

	          UG_WindowCreate(&window_1, obj_buff_wnd_1, MAX_OBJECTS, window_1_callback);

	          // Modify the window title

	          UG_WindowSetTitleText(&window_1,"Motor Control");
	          UG_WindowSetTitleTextFont(&window_1, &FONT_12X20);

	          // Change window fore and back color
	          UG_WindowSetForeColor(&window_1, C_WHITE);
	          UG_WindowSetBackColor(&window_1, C_BLUE);

	          // Create some buttons
	          UG_ButtonCreate(&window_1, &button_1, BTN_ID_0, 10, 10, 110, 60);
	          UG_ButtonCreate(&window_1, &button_2, BTN_ID_1, 10, 80, 110, 130);
	          UG_ButtonCreate(&window_1, &button_3, BTN_ID_2, 10, 150, 110, 200);
	          UG_ButtonCreate(&window_1, &button_4, BTN_ID_3, 10, 220, 110, 270);
	          UG_ButtonCreate(&window_1, &button_5, BTN_ID_4, 130, 150, 220, 200);
	          UG_ButtonCreate(&window_1, &button_6, BTN_ID_5, 130, 220, 220, 270);
	          UG_ButtonCreate(&window_1, &button_7, BTN_ID_6, 130, 80, 220, 130);

	          // Label the buttons
	          UG_ButtonSetForeColor(&window_1, BTN_ID_0, C_BLACK);
	          UG_ButtonSetBackColor(&window_1, BTN_ID_0, C_RED);
	          UG_ButtonSetForeColor(&window_1, BTN_ID_1, C_GREEN);
	          UG_ButtonSetForeColor(&window_1, BTN_ID_2, C_BLACK);
	          UG_ButtonSetForeColor(&window_1, BTN_ID_3, C_BLACK);
	          UG_ButtonSetForeColor(&window_1, BTN_ID_4, C_BLACK);
	          UG_ButtonSetForeColor(&window_1, BTN_ID_5, C_BLACK);
	          UG_ButtonSetForeColor(&window_1, BTN_ID_6, C_BLACK);

	          UG_ButtonSetFont ( &window_1, BTN_ID_0, &FONT_12X20);
	          UG_ButtonSetText ( &window_1, BTN_ID_0, "STOP");
	          UG_ButtonSetFont ( &window_1, BTN_ID_1, &FONT_12X20);
	          UG_ButtonSetText ( &window_1, BTN_ID_1, "START");
	          UG_ButtonSetFont ( &window_1, BTN_ID_2, &FONT_12X20);
	          UG_ButtonSetText ( &window_1, BTN_ID_2, "FWD");
	          UG_ButtonSetFont ( &window_1, BTN_ID_3, &FONT_12X20);
	          UG_ButtonSetText ( &window_1, BTN_ID_3, "REV");

	          UG_ButtonSetFont ( &window_1, BTN_ID_4, &FONT_12X20);
	          UG_ButtonSetText ( &window_1, BTN_ID_4, "+");

	          UG_ButtonSetFont ( &window_1, BTN_ID_5, &FONT_12X20);
	          UG_ButtonSetText ( &window_1, BTN_ID_5, "-");

	          UG_ButtonSetFont ( &window_1, BTN_ID_6, &FONT_12X20);
  			  UG_ButtonSetBackColor (&window_1 , BTN_ID_6, C_YELLOW );
	          UG_ButtonSetText ( &window_1, BTN_ID_6, "MTR A");

	          //  Create Textboxs

	          UG_TextboxCreate( &window_1 , &textbox_1 , TXB_ID_0 , 130 , 10 , 220 , 40 );
	          UG_TextboxSetFont ( &window_1 , TXB_ID_0 , &FONT_12X20 ) ;
	          UG_TextboxSetText ( &window_1 , TXB_ID_0, "SPEED:" );
	          UG_TextboxSetAlignment ( &window_1 , TXB_ID_0 , ALIGN_TOP_CENTER );


	          UG_TextboxCreate( &window_1 , &textbox_2 , TXB_ID_1 , 130 , 40 , 220 , 70 );
	          UG_TextboxSetFont ( &window_1 , TXB_ID_1 , &FONT_12X20 );

	          if (motor_state == 0) {
	        	  itoa(motor_speed_a,buffer,10);
	          }
	          if (motor_state == 1) {
	          	  itoa(motor_speed_b,buffer,10);
	          }

	          UG_TextboxSetText ( &window_1 , TXB_ID_1, buffer);
	          UG_TextboxSetAlignment ( &window_1 , TXB_ID_1 , ALIGN_TOP_CENTER );

              UG_WindowShow(&window_1);
}

// interface between HAL and gui library

void UserPixelSet(UG_S16 x, UG_S16 y, UG_COLOR c) {BSP_LCD_DrawPixel(x, y, c);}

// interface between HAL and touchscreen library

void TouchPress(void) {
	TS_StateTypeDef TS_State;

	BSP_TS_GetState(&TS_State);
	if ( TS_State.TouchDetected ) {
		UG_TouchUpdate(TS_State.X, TS_State.Y, TOUCH_STATE_PRESSED);
		touch_flag=1;
	} else {
		UG_TouchUpdate( -1, -1, TOUCH_STATE_RELEASED);
		touch_flag=0;
	}
}





