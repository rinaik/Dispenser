/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
*/
/* Includes ------------------------------------------------------------------*/

#include "main.h"
#include "cmsis_os.h"

#include "stm32f429i_discovery.h"
#include "stm32f429i_discovery_lcd.h" // lcd header
#include "stm32f429i_discovery_ts.h"  // touch-screen header
#include "stm32f429i_discovery_io.h"  // i-o header

#include "L6470.h" // motor control

#include "gui.h" //  gui functions
#include <stdlib.h>


/* Private variables ---------------------------------------------------------*/

TIM_HandleTypeDef htim1;

osThreadId defaultTaskHandle;

SPI_HandleTypeDef hspi5;

/* Private function prototypes ---------------------------------------------------------*/

static void vLedBlinkGreen(void *pvParameters);
static void vLedBlinkRed(void *pvParameters);
static void vGUIRun();
static void vMotorRun();

static void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI5_Init(void);

static void StartDefaultTask(void const * argument);

// Private functions

// led blink green
static void vLedBlinkGreen(void *pvParameters)
{
    for(;;)
    {
        HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_13);

        vTaskDelay( 500 / portTICK_RATE_MS );
    }
}

// led blink red

static void vLedBlinkRed(void *pvParameters)
{
    for(;;)
    {
        HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_14);

        vTaskDelay( 1000 / portTICK_RATE_MS );
    }
}

// gui function

static void vGUIRun() {

	for(;;)
	    {
		  TouchPress();


		  if (touch_flag) {
			   if ((gui_state == MINUS_A) || (gui_state == MINUS_B)) {
			                   if (motor_state == 0) {
		     				       	motor_speed_a = motor_speed_a - 100;
		     				       	if (motor_speed_a < 0) motor_speed_a = 0;
		     				   }
		     				   if (motor_state == 1) {
		     				        motor_speed_b = motor_speed_b - 100;
		     				        if (motor_speed_b < 0) motor_speed_b = 0;
		     				   }
		     				   if (motor_state == 0) {itoa(motor_speed_a,buffer,10);}
		     				   else {itoa(motor_speed_b,buffer,10);}

			   }
			   if ((gui_state == PLUS_A) || (gui_state == PLUS_B)) {
		     			      if (motor_state == 0) {
		     			          						motor_speed_a = motor_speed_a + 100;
		     			          						if (motor_speed_a > MAX_MTR_SPEED) motor_speed_a = MAX_MTR_SPEED;
		     			          					}
		     			          					if (motor_state == 1) {
		     			          						motor_speed_b = motor_speed_b + 100;
		     			          						if (motor_speed_b > MAX_MTR_SPEED) motor_speed_b = MAX_MTR_SPEED;
		     			          					}

		     			          				   if (motor_state == 0) {itoa(motor_speed_a,buffer,10);}
		     			          				   else {itoa(motor_speed_b,buffer,10);}

			   }
			   UG_TextboxSetText ( &window_1 , TXB_ID_1, buffer);

		  }


		  UG_Update();

		  vTaskDelay( 300 / portTICK_RATE_MS );
	    }
}

// motor parameters calibration

void MotorParams() {

	L6470_SetParam(0, L6470_KVAL_HOLD_ID, KVAL_HOLD_A);
	L6470_SetParam(0, L6470_KVAL_RUN_ID, KVAL_RUN_A);
	L6470_SetParam(0, L6470_KVAL_ACC_ID, KVAL_ACC_A);
	L6470_SetParam(0, L6470_KVAL_DEC_ID, KVAL_DEC_A);
	L6470_SetParam(0, L6470_STALL_TH_ID, STALL_TH_A);

	L6470_SetParam(1, L6470_KVAL_HOLD_ID, KVAL_HOLD_B);
	L6470_SetParam(1, L6470_KVAL_RUN_ID, KVAL_RUN_B);
	L6470_SetParam(1, L6470_KVAL_ACC_ID, KVAL_ACC_B);
	L6470_SetParam(1, L6470_KVAL_DEC_ID, KVAL_DEC_B);
	L6470_SetParam(1, L6470_STALL_TH_ID, STALL_TH_B);
}

// motor SPI configuration

void MotorSPI() {
	          GPIO_InitTypeDef GPIO_InitStruct;

			  /* GPIO Ports Clock Enable */
			  __HAL_RCC_GPIOF_CLK_ENABLE();

			  /* Enable SPI CLK */
			    __HAL_RCC_SPI5_CLK_ENABLE();

			 /*Configure GPIO pins :SPI5 */

			  GPIO_InitStruct.Pin = GPIO_PIN_6;               // Chip select
			  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
			  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

			  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 ; // SCLK MISO MOSI
			  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
			  GPIO_InitStruct.Pull = GPIO_NOPULL;
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
			  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
			  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
}

// main motor control routine

static void vMotorRun() {

	int motor_on_flag_a = 0;
	int motor_run_flag_a = 0;
	int motor_on_flag_b = 0;
	int motor_run_flag_b = 0;

	for(;;)
	{
		  // initialize
		  MotorSPI();
		  MX_SPI5_Init();

		  // check for stall
		  if (motor_state == 0) {
			  if ((L6470_CheckStatusRegisterFlag(0,STEP_LOSS_A_ID)==0) || (L6470_CheckStatusRegisterFlag(0,STEP_LOSS_B_ID)==0)) {
				  L6470_SoftStop(0);
				  gui_state = STOP_A;
			  } else {
				  L6470_GetStatus(0);
			  }
		  }
		  if (motor_state == 1) {
			  if ((L6470_CheckStatusRegisterFlag(1,STEP_LOSS_A_ID)==0) || (L6470_CheckStatusRegisterFlag(1,STEP_LOSS_B_ID)==0)) {
				  L6470_SoftStop(1);
				  gui_state = STOP_B;
			  } else {
				  L6470_GetStatus(1);
			  }
		  }

		  // start button
		  if (gui_state == START_A || gui_state == START_B)
		  {
		      if (motor_state == 0) { motor_on_flag_a = 1;}
		      if (motor_state == 1) { motor_on_flag_b = 1;}
		  }
		  // stop button
		  if (gui_state == STOP_A || gui_state == STOP_B)
		  {

			  if (motor_state == 0) {
			  	  motor_on_flag_a = 0;
				  motor_run_flag_a = 0;
			  }
			  if (motor_state == 1) {
				  motor_on_flag_b = 0;
				  motor_run_flag_b = 0;
			  }
			  L6470_SoftStop(motor_state);
		  }
		  // plus button
		  if (gui_state == PLUS_A || gui_state == PLUS_B )
		  {
			  if(motor_state == 0) {
				  if (motor_speed_a > 15000) {motor_speed_a = 15000;};
				  if (motor_run_flag_a == 1) { L6470_Run(motor_state,direction_a,motor_speed_a); }
			  }
			  if(motor_state == 1) {
				  if (motor_speed_b > 15000) {motor_speed_b = 15000;};
			  	  if (motor_run_flag_b == 1) { L6470_Run(motor_state,direction_b,motor_speed_b); }
			  }
		  }
		  // minus button
		  if (gui_state == MINUS_A || gui_state == MINUS_B)
		  {
			  if (motor_state == 0) {
				  if (motor_speed_a < 0) {motor_speed_a = 0;}
			  	  if (motor_run_flag_a == 1) { L6470_Run(motor_state,direction_a,motor_speed_a); }
			  }
			  if (motor_state == 1) {
				  if (motor_speed_b < 0) {motor_speed_b = 0;}
				  if (motor_run_flag_b == 1) { L6470_Run(motor_state,direction_b,motor_speed_b); }
			  }
		  }
		  // direction control with rev and fwd button
		  if ((motor_on_flag_a == 1) && (gui_state == REV_A || gui_state == FWD_A) ) {
			   if (motor_state == 0) {
			      motor_run_flag_a = 1;
				  if (gui_state == REV_A) {direction_a = 0;}
				  if (gui_state == FWD_A) {direction_a = 1;}
				  L6470_Run(motor_state,direction_a,motor_speed_a);
			   }
		  }
		  if ((motor_on_flag_b == 1) && (gui_state == REV_B || gui_state == FWD_B)) {
			   if (motor_state == 1) {
			      motor_run_flag_b = 1;
				  if (gui_state == REV_B) {direction_b = 0;}
				  if (gui_state == FWD_B) {direction_b = 1;}
				  L6470_Run(motor_state,direction_b,motor_speed_b);
			   }
		  }

       vTaskDelay( 100 / portTICK_RATE_MS );
	}
}

int main(void)
{
  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured IO and SPI */
  // and configure motor parameters

  MX_GPIO_Init();
  MX_SPI5_Init();
  MotorParams();

  /* Initialize LCD and Touch-screen */

  LCDInit();

  // miscellaneous inits
  direction_a = 1;
  direction_b = 1;
  motor_state = 0;
  gui_state = STOP_A;
  motor_speed_a = *(int*)location_a;
  motor_speed_b = *(int*)location_b;

  if (motor_speed_a < 0) motor_speed_a = 0;
  if (motor_speed_b < 0) motor_speed_b = 0;

  /* Initialize GUI with 240x320 screen size*/

  UG_Init(&gui, UserPixelSet, 240, 320);
  GUIInit();

  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate( vLedBlinkGreen, (const char*)"Led Blink Green",
      128, NULL, tskIDLE_PRIORITY, NULL );

  xTaskCreate( vLedBlinkRed, (const char*)"Led Blink Red",
        128, NULL, tskIDLE_PRIORITY, NULL );

  xTaskCreate( vGUIRun, (const char*)"GUI Run",
 	 128, NULL, tskIDLE_PRIORITY, NULL );

  xTaskCreate( vMotorRun, (const char*)"Motor Run",
 	 128, NULL, tskIDLE_PRIORITY, NULL );


  vTaskStartScheduler();

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
static void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 260;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
}


/* SPI6 init function */
static void MX_SPI5_Init(void)
{

  hspi5.Instance = SPI5;
  hspi5.Init.Mode = SPI_MODE_MASTER;
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi5.Init.NSS = SPI_NSS_SOFT;
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
    printf("SPI HAL INIT ERROR !\n");
  }
}


static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /* Enable SPI CLK */
    __HAL_RCC_SPI5_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
}

// Period elapsed callback in non blocking mode

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == TIM1) {
    HAL_IncTick();
   }
}

void _Error_Handler(char * file, int line)
{
    printf("ERROR AT LINE %d\n",line);
}

void assert_failed(uint8_t* file, uint32_t line)
{
	printf ("Assert Error at line %lu\n",line);
}


